---
AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Resources:
  ThumbBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-thumbs'
  ThumbStoreRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-ThumbStoreRole'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'
              - Action:
                  - s3:GetObject
                  - s3:PutObject
                Effect: Allow
                Resource: !Sub 'arn:aws:s3:::${ThumbBucket}/*'
              - Effect: Allow
                Action:
                  - iot:Publish
                  - iot:Connect
                  - iot:UpdateThingShadow
                Resource:
                  - '*'
  ThumbStoreLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt [ThumbStoreRole, Arn]
      Runtime: python3.6
      Handler: iot_request_thumb.handler
      Timeout: 10
      FunctionName: iot_request_thumb
      Environment:
        Variables:
          S3_THUMB_BUCKET_NAME: !Sub '${AWS::StackName}-thumbs'
      CodeUri: ../lambda
      Events:
        ThumbStoreEvent:
          Type: IoTRule
          Properties:
            AwsIotSqlVersion: 2016-03-23
            Sql: "SELECT * FROM 'cloudcam/thumb/request/*'"
        ThumbStoreConnectedEvent:
          Type: IoTRule
          Properties:
            AwsIotSqlVersion: 2016-03-23
            Sql: "SELECT * FROM '$aws/events/presence/connected/#'"

  CognitoWebRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action:
              - sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref CognitoIdentityPool
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-CognitoWebRole'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - iot:Connect
                  - iot:Subscribe
                  - iot:Publish
                  - iot:Receive
                Resource: '*'
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt [IotAttachThingPolicyLambda, Arn]
                  - !GetAtt [IotProvisionThingLambda, Arn]
                  - !GetAtt [IotListThingsLambda, Arn]
                  - !GetAtt [JanusStartStreamLambda, Arn]
                  - !GetAtt [JanusStopStreamLambda, Arn]
                  - !GetAtt [ThumbStoreLambda, Arn]
  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref CognitoClient
          ProviderName: !GetAtt [CognitoUserPool, ProviderName]
      CognitoEvents:
        SyncTrigger: !GetAtt [CognitoPresignupLambda, Arn]
  CognitoIdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref CognitoIdentityPool
      Roles:
        authenticated: !GetAtt [CognitoWebRole, Arn]
  CognitoPresignupLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-CognitoPresignupLambdaRole'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - iot:DescribeEndpoint
                  - sts:AssumeRole
                Resource: '*'
              - Effect: Allow
                Action:
                  - execute-api:Invoke
                Resource: '*'

  CognitoPresignupLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt [CognitoPresignupLambdaRole, Arn]
      Runtime: python3.6
      Handler: cognito_presignup.handler
      CodeUri: ../lambda
  CognitoPresignupLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt [CognitoPresignupLambda, Arn]
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt [CognitoUserPool, Arn]
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub '${AWS::StackName}UserPool'
      LambdaConfig:
        PreSignUp: !GetAtt [CognitoPresignupLambda, Arn]
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
  CognitoClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub '${AWS::StackName}UserPoolClient'
      GenerateSecret: false
      UserPoolId: !Ref CognitoUserPool

  IotAttachThingPolicyLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-IotAttachThingPolicyLambdaRole'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - iot:DescribeEndpoint
                  - iot:CreatePolicy
                  - iot:DeletePolicy
                  - iot:AttachPrincipalPolicy
                  - iot:DetachPrincipalPolicy
                  - iot:UpdateThing
                  - sts:AssumeRole
                Resource: '*'
              - Effect: Allow
                Action:
                  - execute-api:Invoke
                Resource: '*'
  IotAttachThingPolicyLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt [IotAttachThingPolicyLambdaRole, Arn]
      FunctionName: iot_attach_thing_policy
      Runtime: python3.6
      Handler: iot_attach_thing_policy.handler
      CodeUri: ../lambda

  IotProvisionThingLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-IotProvisionThingLambdaRole'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - iot:DescribeEndpoint
                  - iot:CreatePolicy
                  - iot:DeletePolicy
                  - iot:AttachPrincipalPolicy
                  - iot:DetachPrincipalPolicy
                  - iot:CreateThing
                  - iot:CreateKeysAndCertificate
                  - sts:AssumeRole
                Resource: '*'
              - Effect: Allow
                Action:
                  - execute-api:Invoke
                Resource: '*'
  IotProvisionThingLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt [IotProvisionThingLambdaRole, Arn]
      FunctionName: iot_provision_thing
      Runtime: python3.6
      Timeout: 10
      Handler: iot_provision_thing.handler
      CodeUri: ../lambda

  IotListThingsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-IotListThingsLambdaRole'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - iot:ListPrincipalPolicies
                  - iot:DescribeThing
                  - sts:AssumeRole
                Resource: '*'
              - Effect: Allow
                Action:
                  - execute-api:Invoke
                Resource: '*'
  IotListThingsLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt [IotListThingsLambdaRole, Arn]
      FunctionName: iot_list_things
      Runtime: python3.6
      Handler: iot_list_things.handler
      CodeUri: ../lambda

  UiBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
      BucketName: !Ref UiBucketName

  JanusStartStreamLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-JanusStartStreamLambdaRole'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                  - iot:Publish
                  - iot:Connect
                  - iot:GetThingShadow
                  - iot:UpdateThingShadow
                  - lightsail:GetInstance
                  - lightsail:GetInstances
                Resource: '*'
              - Effect: Allow
                Action:
                  - execute-api:Invoke
                Resource: '*'
  JanusStartStreamLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt [JanusStartStreamLambdaRole, Arn]
      FunctionName: janus_start_stream
      Runtime: python3.6
      Handler: janus_start_stream.handler
      Timeout: 10
      CodeUri: ../lambda
      Environment:
        Variables:
          JANUS_HOSTED_ZONE_DOMAIN: !Ref JanusHostedZoneDomain
          JANUS_INSTANCE_NAME_PREFIX: !Ref JanusInstanceNamePrefix

  JanusStopStreamLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-JanusStopStreamLambdaRole'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                  - iot:Publish
                  - iot:Connect
                  - iot:GetThingShadow
                  - iot:UpdateThingShadow
                Resource: '*'
              - Effect: Allow
                Action:
                  - execute-api:Invoke
                Resource: '*'
  JanusStopStreamLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt [JanusStopStreamLambdaRole, Arn]
      FunctionName: janus_stop_stream
      Runtime: python3.6
      Handler: janus_stop_stream.handler
      Timeout: 10
      CodeUri: ../lambda

  JanusScaleLightsailLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-JanusScaleLightsailLambdaRole'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                  - lightsail:GetInstance
                  - lightsail:GetInstances
                  - lightsail:CreateInstances
                  - lightsail:DeleteInstance
                  - lightsail:OpenInstancePublicPorts
                  - route53:ChangeResourceRecordSets
                  - route53:ListHealthChecks
                  - route53:CreateHealthCheck
                  - route53:DeleteHealthCheck
                  - route53:ChangeTagsForResource
                  - route53:TestDNSAnswer
                  - cloudwatch:PutMetricAlarm
                  - cloudwatch:DeleteAlarms
                  - kms:Decrypt
                Resource: '*'
              - Effect: Allow
                Action:
                  - execute-api:Invoke
                Resource: '*'
  JanusScaleLightsailLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt [JanusScaleLightsailLambdaRole, Arn]
      FunctionName: janus_scale_lightsail
      Runtime: python3.6
      Handler: janus_scale_lightsail.handler
      Timeout: 300
      CodeUri: ../lambda
      Environment:
        Variables:
          LIGHTSAIL_AZS: !Ref LightsailAzs
          LIGHTSAIL_BLUEPRINT_ID: !Ref LightsailBlueprintId
          LIGHTSAIL_BUNDLE_ID: !Ref LightsailBundleId
          LIGHTSAIL_JANUS_IMAGE: !Ref LightsailJanusImage
          JANUS_HOSTED_ZONE_ID: !Ref JanusHostedZoneId
          JANUS_HOSTED_ZONE_DOMAIN: !Ref JanusHostedZoneDomain
          JANUS_INSTANCE_NAME_PREFIX: !Ref JanusInstanceNamePrefix

  JanusKmsKey:
    Type: AWS::KMS::Key
    Properties:
      Enabled: true
      EnableKeyRotation: false
      KeyPolicy:
        Version: 2012-10-17
        Id: janus-kms
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action:
              - 'kms:*'
            Resource: '*'
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:user/${JanusKmsKeyUser}'
            Action:
              - kms:Encrypt
            Resource: '*'
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - kms:Decrypt
            Resource: '*'
  JanusKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: 'alias/janus'
      TargetKeyId: !Ref JanusKmsKey

Parameters:
  UiBucketName:
    Type: String
    Description: 'S3 UI bucket name. Must be the same as the UI domain name for CNAME redirect to work'
    Default: beta.cloudcam.space
  JanusCertPem:
    Type: String
    Description: 'Janus gateway SSL cert PEM'
    Default: ''
  JanusCertKey:
    Type: String
    Description: 'Janus gateway SSL cert KEY'
    Default: ''
  LightsailAzs:
    Type: String
    Description: 'Lightsail Janus gateway instance availability zone'
    Default: 'us-west-2a,us-west-2b,us-west-2c'
  LightsailBlueprintId:
    Type: String
    Description: 'Lightsail Janus gateway instance blueprint (image) id'
    Default: amazon_linux_2017_03_1_1
  LightsailBundleId:
    Type: String
    Description: 'Lightsail Janus gateway instance bundle (type) id'
    Default: nano_1_0
  LightsailJanusImage:
    Type: String
    Description: 'Lightsail Janus gateway Docker image name'
    Default: 'somebodyelse/docker-janus:latest'
  JanusHostedZoneId:
    Type: String
    Description: 'AWS Hosted Zone Id where Janus instances will receive DNS names'
    Default: Z1MUZ3ZP15MONF
  JanusHostedZoneDomain:
    Type: String
    Description: 'AWS Hosted Zone domain where Janus instances will receive DNS names'
    Default: cloudcam.space
  JanusInstanceNamePrefix:
    Type: String
    Description: 'Janus instance/dns name prefix'
    Default: ls-janus
  JanusKmsKeyUser:
    Type: String
    Description: 'User name to grant rights to use Janus SSL KMS key for signing'
    Default: cloudcam-ops

Outputs:
  IdentityPoolId:
    Description: 'Id of the Cognito identity pool'
    Value: !Ref CognitoIdentityPool
  UserPoolName:
    Description: 'Name of the Cognito user pool'
    Value: !GetAtt [CognitoUserPool, ProviderName]
  UserPoolClientName:
    Description: 'Name of the Cognito user pool web client'
    Value: !Ref CognitoClient
  UiUrl:
    Description: 'URL of the UI'
    Value: !GetAtt [UiBucket, WebsiteURL]
