---
Resources:
  ThumbBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '#{AWS::StackName}-thumbs'
  ThumbStoreRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub '#{AWS::StackName}-ThumbStoreRole'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'
              - Action:
                  - s3:GetObject
                  - s3:PutObject
                Effect: Allow
                Resource: !Sub 'arn:aws:s3:::#{ThumbBucket}/*'
              - Effect: Allow
                Action:
                  - iot:Publish
                  - iot:Connect
                  - iot:UpdateThingShadow
                Resource:
                  - '*'

  CognitoWebRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action:
              - sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref CognitoIdentityPool
      Policies:
        - PolicyName: !Sub '#{AWS::StackName}-CognitoWebRole'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - iot:Connect
                  - iot:Subscribe
                  - iot:Publish
                  - iot:Receive
                Resource: '*'
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:#{AWS::StackName}*"
  #                 - !GetAtt [IotAttachThingPolicyLambda, Arn]
  #                 - !GetAtt [IotProvisionThingLambda, Arn]
  #                 - !GetAtt [IotListThingsLambda, Arn]
  #                 - !GetAtt [JanusStartStreamLambda, Arn]
  #                 - !GetAtt [JanusStopStreamLambda, Arn]
  #                 - !GetAtt [ThumbStoreLambda, Arn]
  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref CognitoClient
          ProviderName: !GetAtt [CognitoUserPool, ProviderName]
      CognitoEvents:
        SyncTrigger: !GetAtt [CognitoPresignupLambdaFunction, Arn]
  CognitoIdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref CognitoIdentityPool
      Roles:
        authenticated: !GetAtt [CognitoWebRole, Arn]
  CognitoPresignupLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub '#{AWS::StackName}-CognitoPresignupLambdaRole'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - iot:DescribeEndpoint
                  - sts:AssumeRole
                Resource: '*'
              - Effect: Allow
                Action:
                  - execute-api:Invoke
                Resource: '*'

  CognitoPresignupLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt [CognitoPresignupLambdaFunction, Arn]
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt [CognitoUserPool, Arn]
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub '#{AWS::StackName}UserPool'
      LambdaConfig:
        PreSignUp: !GetAtt [CognitoPresignupLambdaFunction, Arn]
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
  CognitoClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub '#{AWS::StackName}UserPoolClient'
      GenerateSecret: false
      UserPoolId: !Ref CognitoUserPool

  IotAttachThingPolicyLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub '#{AWS::StackName}-IotAttachThingPolicyLambdaRole'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - iot:DescribeEndpoint
                  - iot:CreatePolicy
                  - iot:DeletePolicy
                  - iot:AttachPrincipalPolicy
                  - iot:DetachPrincipalPolicy
                  - iot:UpdateThing
                  - sts:AssumeRole
                Resource: '*'
              - Effect: Allow
                Action:
                  - execute-api:Invoke
                Resource: '*'

  IotProvisionThingLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub '#{AWS::StackName}-IotProvisionThingLambdaRole'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - iot:DescribeEndpoint
                  - iot:CreatePolicy
                  - iot:DeletePolicy
                  - iot:AttachPrincipalPolicy
                  - iot:DetachPrincipalPolicy
                  - iot:CreateThing
                  - iot:CreateKeysAndCertificate
                  - sts:AssumeRole
                Resource: '*'
              - Effect: Allow
                Action:
                  - execute-api:Invoke
                Resource: '*'

  IotListThingsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub '#{AWS::StackName}-IotListThingsLambdaRole'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - iot:ListPrincipalPolicies
                  - iot:DescribeThing
                  - sts:AssumeRole
                Resource: '*'
              - Effect: Allow
                Action:
                  - execute-api:Invoke
                Resource: '*'

  UiBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
      BucketName: ${self:custom.cloudcam.ui_bucket_name}

  JanusStartStreamLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub '#{AWS::StackName}-JanusStartStreamLambdaRole'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                  - iot:Publish
                  - iot:Connect
                  - iot:GetThingShadow
                  - iot:UpdateThingShadow
                  - lightsail:GetInstance
                  - lightsail:GetInstances
                Resource: '*'
              - Effect: Allow
                Action:
                  - execute-api:Invoke
                Resource: '*'

  JanusStopStreamLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub '#{AWS::StackName}-JanusStopStreamLambdaRole'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                  - iot:Publish
                  - iot:Connect
                  - iot:GetThingShadow
                  - iot:UpdateThingShadow
                Resource: '*'
              - Effect: Allow
                Action:
                  - execute-api:Invoke
                Resource: '*'

  JanusScaleLightsailLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub '#{AWS::StackName}-JanusScaleLightsailLambdaRole'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                  - lightsail:GetInstance
                  - lightsail:GetInstances
                  - lightsail:CreateInstances
                  - lightsail:DeleteInstance
                  - lightsail:OpenInstancePublicPorts
                  - route53:ChangeResourceRecordSets
                  - route53:ListHealthChecks
                  - route53:CreateHealthCheck
                  - route53:DeleteHealthCheck
                  - route53:ChangeTagsForResource
                  - route53:TestDNSAnswer
                  - cloudwatch:PutMetricAlarm
                  - cloudwatch:DeleteAlarms
                  - kms:Decrypt
                Resource: '*'
              - Effect: Allow
                Action:
                  - execute-api:Invoke
                Resource: '*'

  JanusKmsKey:
    Type: AWS::KMS::Key
    Properties:
      Enabled: true
      EnableKeyRotation: false
      KeyPolicy:
        Version: "2012-10-17"
        Id: janus-kms
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::#{AWS::AccountId}:root'
            Action:
              - 'kms:*'
            Resource: '*'
          # - Effect: Allow
          #   Principal:
          #     AWS: !Sub '#{JanusKmsKeyUserArn}'
          #   Action:
          #     - kms:Encrypt
          #   Resource: '*'
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - kms:Decrypt
            Resource: '*'
  JanusKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: 'alias/janus'
      TargetKeyId: !Ref JanusKmsKey

Parameters:
  LightsailAzs:
    Type: String
    Description: 'Lightsail Janus gateway instance availability zone'
    Default: 'us-west-2a,us-west-2b,us-west-2c'
  LightsailBlueprintId:
    Type: String
    Description: 'Lightsail Janus gateway instance blueprint (image) id'
    Default: amazon_linux_2017_03_1_1
  LightsailBundleId:
    Type: String
    Description: 'Lightsail Janus gateway instance bundle (type) id'
    Default: nano_1_0
  LightsailJanusImage:
    Type: String
    Description: 'Lightsail Janus gateway Docker image name'
    Default: 'somebodyelse/docker-janus:latest'

Outputs:
  IdentityPoolId:
    Description: 'Id of the Cognito identity pool'
    Value: !Ref CognitoIdentityPool
  UserPoolName:
    Description: 'Name of the Cognito user pool'
    Value: !GetAtt [CognitoUserPool, ProviderName]
  UserPoolClientName:
    Description: 'Name of the Cognito user pool web client'
    Value: !Ref CognitoClient
  UiUrl:
    Description: 'URL of the UI'
    Value: !GetAtt [UiBucket, WebsiteURL]
